<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!-- 检查文件是否以一个空行结束 -->
    <!--    <module name="NewlineAtEndOfFile"/>-->
    <!--    固定的包逃避检查，适用于自动生成的代码逃避检查，可根据项目自身情况自己调整，
    默认 */biz/business/{domain||mapper}下不检查 -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern"
                  value=".*[\\/]domain[\\/].*$"/>
    </module>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern"
                  value=".*[\\/]mapper[\\/].*$"/>
    </module>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern"
                  value=".*[\\/]proto[\\/].*$"/>
    </module>
    <!-- 文件长度不超过2000行 -->
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>
    <!-- 每个java文件一个语法树 -->
    <module name="TreeWalker">
        <!-- 开启 通过固定文本，进行checkStyle的开关 -->
        <!-- CHECKSTYLE:OFF  CHECKSTYLE:ON 注释中间的代码块，不执行检查-->
        <module name="SuppressionCommentFilter"/>

        <!-- import检查-->
        <!-- 避免使用* -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math,java.lang.annotation"/>
            <!-- 实例；import java.util.*;.-->
            <property name="allowClassImports" value="false"/>
            <!-- 实例 ；import static org.junit.Assert.*;-->
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <!-- 检查是否从非法的包中导入了类，比如sun包下，开发人员禁用 -->
        <module name="IllegalImport"/>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的import检查，比如：1.没有被用到 2.重复的 3.import java.lang的 4.import 与该类在同一个package的 -->
        <module name="UnusedImports" />
        <!-- 命名检查 -->
        <!-- 局部的final变量，包括catch中的参数的检查 "^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <module name="LocalFinalVariableName" />
        <!-- 局部的非final型的变量，包括catch中的参数的检查 "^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <module name="LocalVariableName" />
        <!-- 包名的检查（只允许小写字母），默认^[com.jindi.infra.style.biz.business.action.a-z]+(\.[com.jindi.infra.style.biz.business.action.a-zA-Z_][com.jindi.infra.style.biz.business.action.a-zA-Z_0-9_]*)*$ -->
        <module name="PackageName">
            <property name="format" value="^[com.jindi.infra.style.biz.business.action.a-z]+(\.[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 仅仅是static型的变量（切记不包括static final型）的检查 默认值："^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <!-- public static String LOCK_NUM = "asdfghndsfg" -->
        <module name="StaticVariableName" />
        <!-- Class或Interface名检查，默认"^[A-Z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$"-->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 非static型变量的检查 "^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <module name="MemberName" />
        <!-- 方法名的检查 "^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <module name="MethodName" />
        <!-- 方法的参数名 	"^[com.jindi.infra.style.biz.business.action.a-z][com.jindi.infra.style.biz.business.action.a-zA-Z0-9]*$" -->
        <module name="ParameterName" />
        <!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <module name="ConstantName" />
        <!-- 定义检查 -->
        <!-- 检查数组类型定义的样式 String[] array ok; -->
        <module name="ArrayTypeStyle"/>
        <!-- 检查long型定义是否有大写的“L” -->
        <module name="UpperEll"/>
        <!-- 长度检查 -->
        <!-- 每行不超过150个字符 -->
        <module name="LineLength">
            <property name="max" value="150" />
        </module>
        <!-- 方法不超过80行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF" />
            <property name="max" value="80" />
        </module>
        <!-- 方法的参数个数不超过3个。 并且不对构造方法进行检查-->
        <module name="ParameterNumber">
            <property name="max" value="5" />
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF" />
        </module>

        <!-- 空格检查-->
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad" />
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad" />
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>
        <!-- 操作符换行策略检查 -->
        <module name="OperatorWrap"/>
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>
        <!-- 检查分隔符周围是否有空白 -->
        <module name="WhitespaceAround"/>

        <!-- 修饰符检查 -->
        <!-- 检查修饰符的顺序是否遵照java语言规范，默认public、protected、private、abstract、static、final、transient、volatile、synchronized、native、strictfp -->
        <module name="ModifierOrder"/>
        <!-- 检查接口和annotation中是否有多余修饰符，如接口方法不必使用public -->
        <module name="RedundantModifier"/>

        <!-- 代码块检查 -->
        <!-- 检查是否有嵌套代码块 -->
        <module name="AvoidNestedBlocks"/>
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失{} -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>

        <!-- 代码检查 -->
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
        <!--  nullString.equals("My_Sweet_String"); 不通过，常量在前 -->
        <module name="EqualsAvoidNull"/>
        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查局部变量或参数是否隐藏了类中的变量；比如在方法中定义一个跟类成员变量同名的变量 -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <!-- 检查是否使用工厂方法实例化 -->
        <module name="IllegalInstantiation"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查是否有"魔术"数字 放开 -->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="0, 1"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>
        <!-- 检查switch语句是否有default -->
        <module name="MissingSwitchDefault"/>
        <!-- 检查是否有过度复杂的布尔表达式 例如: !false -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 return !true; -->
        <module name="SimplifyBooleanReturn"/>

        <!-- 类设计检查 -->
        <!-- 检查仅具有私有构造函数的类是否声明为 final。不检查嵌套在接口或注释中的类，因为它们总是final在那里。 -->
        <module name="FinalClass"/>
        <!--   HideUtilityClassConstructor 检查类是否仅有public的构造器 和 静态成员变量 如果是，会被认为工具类 -->
        <!--        工具类的写法他认为应该满足几点:-->
        <!--           1: 构造方法应该私有，不应该对外暴露-->
        <!--           2：类应该被定义为 final类型-->
        <!--        <module name="HideUtilityClassConstructor"/>-->
        <!-- 检查接口是否仅定义类型 -->
        <module name="InterfaceIsType"/>
        <!-- 检查类成员的可见度 检查类成员的可见性。静态成员变量必须是 static final 类型的,否则应该定义为private,并提供访问方法 -->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true"/>
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- 语法 -->
        <!-- String的比较不能用!= 和 == -->
        <module name="StringLiteralEquality"/>
        <!-- 限制for循环最多嵌套2层 -->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <!-- if最多嵌套3层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <!-- 检查未被注释的main方法,排除以Appllication结尾命名的类 -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*Application$"/>
        </module>
        <!-- 禁止使用System.out.println -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!-- 禁止使用 *.printStackTrace() -->
        <module name="Regexp">
            <property name="format" value="\.printStackTrace"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!--try catch 异常处理数量 3-->
        <module name="NestedTryDepth ">
            <property name="max" value="3"/>
        </module>
        <!-- 单个方法抛出异常个数 -->
        <module name="ThrowsCount">
            <property name="max" value="1"/>
        </module>
        <!-- clone方法必须调用了super.clone() -->
        <module name="SuperClone" />
        <!-- finalize 必须调用了super.finalize() -->
        <module name="SuperFinalize" />
    </module>
</module>
